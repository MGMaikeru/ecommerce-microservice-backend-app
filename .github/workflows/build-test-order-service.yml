name: Order Service CI/CD Pipeline

on:
  push:
    branches: [develop]
    paths:
      - "order-service/**"
  pull_request:
    branches: [develop]
    paths:
      - "order-service/**"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build order-service
        run: |
          cd order-service
          ./mvnw clean package -DskipTests

      - name: Run unit tests with coverage
        run: |
          cd order-service
          ./mvnw test
          ./mvnw jacoco:report

      - name: SonarQube Analysis
        env:
          SONAR_HOST_URL: https://b5b3-200-3-193-229.ngrok-free.app/
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd order-service
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=order-service \
            -Dsonar.projectName='Order Service' \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.ws.headers="ngrok-skip-browser-warning: true"

      - name: Upload build artifact
        if: success() && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: order-service-jar
          path: order-service/target/*.jar

  build-and-publish-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: order-service-jar
          path: order-service/target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/order-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./order-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
